#!/usr/bin/env node

require('dotenv').config();

const aedes = require('aedes')();
const async = require('async');
const { CronJob } = require('cron');
const net = require('net');
const http = require('http');
const ws = require('websocket-stream');
const app = require('../src/app');
const { CardSeen } = require('../src/models/CardSeen');
const { User } = require('../src/models/User');
const { Device } = require('../src/models/Device');
const mqtt = require('../src/mqtt');

// Ensure device links are up to date with current settings (in case they changed)
(async () => {
  const allUsers = await User.getAll();
  await async.each(allUsers, async (user) => {
    const allDevices = await user.getDevices();
    await async.each(allDevices, async (device) => {
      await device.updateConfigLinks(user);
    });
  });
})();

// Get port from environment and store in Express.

const port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

// Create HTTP Server

const server = http.createServer(app);

// Listen on provided port, on all network interfaces.

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Event listener for HTTP server "error" event.

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  console.log(`Express server listening on ${bind}`);
}

// Create MQTT Server

if (process.env.MQTT_HOST) {
  const mqttServer = net.createServer(aedes.handle);
  mqttServer.listen(process.env.MQTT_PORT || 1883, () => {
    console.log(`MQTT websocket server listening on port ${process.env.MQTT_PORT || 1883}`);
  });

  const mqttWsServer = http.createServer();
  ws.createServer({ server: mqttWsServer }, aedes.handle);

  mqttWsServer.listen(process.env.MQTT_WS_PORT || 8888, () => {
    console.log(`MQTT websocket server listening on port ${process.env.MQTT_WS_PORT || 8888}`);
  });

  // MQTT Event Handlers
  
  mqtt.set(aedes);
  aedes.authenticate = mqtt.authenticate;
  aedes.authorizeSubscribe = mqtt.authorizeSubscribe;
  aedes.authorizePublish = mqtt.authorizePublish;
}

// Scheduled Jobs
const cardSeenReset = new CronJob(process.env.CLEAR_CARD_CACHE || '0 0 0 * * *', async () => {
  console.log('Resetting device card cache');
  const count = await CardSeen.update({ seen: true }, { $set: { seen: false } });
  console.log(`${count} records updated`);
}, null, true);

console.log(`Card cache will be cleared at ${cardSeenReset.nextDate()}`);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const parsedPort = parseInt(val, 10);

  if (Number.isNaN(parsedPort)) {
    // named pipe
    return val;
  }

  if (parsedPort >= 0) {
    // port number
    return parsedPort;
  }

  return false;
}
